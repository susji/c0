package cfg

import (
	"fmt"
	"strings"

	"github.com/susji/c0/node"
)

// multiline handles escaping and multilining of dot labels
func multiline(src string) string {
	return strings.ReplaceAll(
		fmt.Sprintf("%q", src), `\n`, `\l`)
}

func (bb *BasicBlock) Dot(b *strings.Builder, memblock memblock, membranch membranch) {
	if memblock.seen(bb) {
		return
	}
	bs := &strings.Builder{}
	switch bb.Id {
	case BLOCKID_ENTRY:
		bs.WriteString("entry")
	case BLOCKID_EXIT:
		bs.WriteString("exit")
	default:
		bs.WriteString(fmt.Sprintf("[block #%d]\n", bb.Id))
		for si, s := range bb.Stmts {
			bs.WriteString(fmt.Sprintf("[%03d] %s\n", si+1, s.String()))
		}
	}
	b.WriteString(
		fmt.Sprintf("    %s [label=%s];\n", nameBlock(bb), multiline(bs.String())))
	for _, succ := range bb.Successors {
		succ.Dot(b, memblock, membranch)
	}
	memblock.add(bb)
}

func (b *Branch) Dot(db *strings.Builder, memblock memblock, membranch membranch) {
	if membranch.seen(b) {
		return
	} else {
		membranch.add(b)
	}
	b.To.Dot(db, memblock, membranch)
	label := b.Kind.Kind.String() + "\n"
	switch b.Kind.Kind {
	case BK_ALWAYS:
	case BK_IFTRUE, BK_IFFALSE, BK_IFNOELSE:
		label += "cond: " + b.Kind.Node.(*node.If).Cond.String()
	case BK_WHILETRUE, BK_WHILEFALSE:
		label += "cond: " + b.Kind.Node.(*node.While).Cond.String()
	case BK_FORTRUE, BK_FORFALSE:
		label += "cond: " + b.Kind.Node.(*node.For).Cond.String()
	default:
		panic("unknown branching kind: " + b.Kind.Kind.String())
	}
	db.WriteString(
		fmt.Sprintf("    %s -> %s [label=%s];\n",
			nameBlock(b.From), nameBlock(b.To), multiline(label)))
}

func nameBlock(b *BasicBlock) string {
	if b == nil {
		return "block_leaf"
	}
	return fmt.Sprintf("block_%d", b.Id)
}

func (c *CFG) renderFunDef() string {
	b := &strings.Builder{}
	b.WriteString(fmt.Sprintf("Function: %s\n", c.fundef.FunDecl.Name))
	b.WriteString(fmt.Sprintf("Returns: %s\n", c.fundef.FunDecl.Returns.String()))
	for pi, p := range c.fundef.FunDecl.Params {
		b.WriteString(fmt.Sprintf("arg[%d]: %s\n", pi, p.String()))
	}
	return b.String()
}

func (c *CFG) Dot() string {
	b := &strings.Builder{}
	b.WriteString(`// Automatically generated by c0.
digraph cfg {
    node [shape="box"];
    labelloc = "t";
`)
	b.WriteString(fmt.Sprintf("    label = %s;\n", multiline(c.renderFunDef())))
	c.first.Dot(b, memblock{}, membranch{})
	b.WriteString("}\n")
	return b.String()
}
